{"ast":null,"code":"var _jsxFileName = \"/home/lautaro/personal/ReciplasTS/frontend/src/componentes/AGTable.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useMemo, useRef, useCallback } from \"react\";\n// AG-Grid\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\n\n// La idea es que tengamos una unica funcion AGTable para llamar a todas las tablas, pasandole los parametros para que sean únicas.\n// TODO: Ver como parametrizar las columnas.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AGTable({\n  endpointPath\n}) {\n  _s();\n  const NumFilter = \"agNumberColumnFilter\";\n  const TextFilter = \"agTextColumnFilter\";\n  const DateFilter = \"agDateColumnFilter\";\n  const gridRef = useRef(null);\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const [rowData, setRowData] = useState();\n  const [columnDefs, setColumnDefs] = useState();\n  const defaultColDef = useMemo(() => ({\n    sortable: true,\n    filter: true,\n    resizable: true,\n    floatingFilter: true\n  }), []);\n\n  // const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n  //     {field: \"ID\", filter: NumFilter,},\n  //     {field: \"Producto\", filter: TextFilter},\n  //     {field: \"Cantidad\", filter: NumFilter},\n  //     {field: \"Precio\", filter: NumFilter},\n  //     {field: \"Descripción\", filter: TextFilter},\n  //     {field: \"UltimoCambio\", filter: DateFilter},\n  //     {field: \"Apellido\", filter: TextFilter}\n  // ]);\n\n  useEffect(() => {\n    // fetch(\"127.0.0.1:8000/api/clientes/\")\n    fetch('https://www.ag-grid.com/example-assets/row-data.json').then(result => result.json()).then(rowData => setRowData(rowData));\n  }, []);\n  useEffect(() => {\n    // fetch(\"127.0.0.1:8000/api/clientes/\")\n    fetch('https://www.ag-grid.com/example-assets/row-data.json').then(result => result.json()).then(data => {\n      const colDefs = gridOptions.api.getColumnDefs();\n      colDefs.lenght = 0;\n      const keys = Object.keys(data[0]);\n      keys.forEach(key => colDefs.push({\n        field: key\n      }));\n      setColumnDefs(colDefs);\n      setRowData(data);\n    });\n  }, []);\n  // [\n  //     {ID: 1, Producto:\"Paraguas\", Cantidad:\"20\", Precio:\"$1000\", Descripción:\"Morbi ut odio.\", UltimoCambio: \"06/23/2023\"},\n  //     {ID: 2, Producto:\"Mesa\", Cantidad:\"24\", Precio:\"$10000\", Descripción:\"In eleifend quam a odio.\", UltimoCambio: \"04/21/2023\"},\n  //     {ID: 3, Producto:\"Mesa\", Cantidad:\"48\", Precio:\"$2000\", Descripción:\" Cum sociis natoque mus.\", UltimoCambio: \"03/01/2023\"},\n  //     {ID: 4, Producto:\"Zapatillas\", Cantidad:\"59\", Precio:\"$1500\", Descripción:\"Sed vel enim sit.\", UltimoCambio: \"02/25/2023\"},\n  //     {ID: 5, Producto:\"Lampara\", Cantidad:\"17\", Precio:\"$7000\", Descripción:\"Vivamos in felis.\", UltimoCambio: \"02/11/2023\"},\n  //     {ID: 6, Producto:\"Mesa\", Cantidad:\"27\", Precio:\"$500\", Descripción:\"Integer non velit.\", UltimoCambio: \"07/01/2023\"},\n  //     {ID: 7, Producto:\"Lampara\", Cantidad:\"51\", Precio:\"$4000\", Descripción:\"Morbi venstibulum.\", UltimoCambio: \"03/13/2023\"},\n  //     {ID: 8, Producto:\"Mesa\", Cantidad:\"42\", Precio:\"$9000\", Descripción:\"Impsum primis.\", UltimoCambio: \"03/06/2023\"},\n  //     {ID: 9, Producto:\"Anteojos\", Cantidad:\"15\", Precio:\"$3500\", Descripción:\"Sed accumsan felis.\", UltimoCambio: \"08/31/2023\"},\n  //     {ID: 10, Producto:\"Silla\", Cantidad:\"44\", Precio:\"$1000\", Descripción:\"Proin eu mi.\", UltimoCambio: \"05/27/2023\"}\n  // ]\n\n  // Esto es para que el ancho de las columnas de la tabla se actualizen para usar todo el ancho de la ventana.\n  const sizeToFit = useCallback(() => {\n    var _gridRef$current, _gridRef$current$api;\n    (_gridRef$current = gridRef.current) === null || _gridRef$current === void 0 ? void 0 : (_gridRef$current$api = _gridRef$current.api) === null || _gridRef$current$api === void 0 ? void 0 : _gridRef$current$api.sizeColumnsToFit({});\n  }, []);\n  useEffect(() => {\n    window.addEventListener('resize', sizeToFit);\n    return () => {\n      window.removeEventListener('resize', sizeToFit);\n    };\n  }, []);\n\n  // TODO: HACER QUE sizeToFit se ejecute cuando se carga la ventana por primera vez.\n  // Me parece que esto no funciona por cómo está definido sizeToFit.\n  // useEffect(() => {\n  //     console.log(\"ACA DEBERIA FUNCIONAR!\")\n  //     sizeToFit\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-alpine\",\n      style: {\n        height: 650\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        ref: gridRef,\n        rowData: rowData,\n        columnDefs: columnDefs,\n        defaultColDef: defaultColDef,\n        rowSelection: \"multiple\",\n        animateRows: true,\n        pagination: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(AGTable, \"46BY2hhDvJ2Q9o673/sQsRBwjEg=\");\n_c = AGTable;\nvar _c;\n$RefreshReg$(_c, \"AGTable\");","map":{"version":3,"names":["useState","useEffect","useMemo","useRef","useCallback","AgGridReact","jsxDEV","_jsxDEV","AGTable","endpointPath","_s","NumFilter","TextFilter","DateFilter","gridRef","gridApi","setGridApi","gridColumnApi","setGridColumnApi","rowData","setRowData","columnDefs","setColumnDefs","defaultColDef","sortable","filter","resizable","floatingFilter","fetch","then","result","json","data","colDefs","gridOptions","api","getColumnDefs","lenght","keys","Object","forEach","key","push","field","sizeToFit","_gridRef$current","_gridRef$current$api","current","sizeColumnsToFit","window","addEventListener","removeEventListener","children","className","style","height","ref","rowSelection","animateRows","pagination","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/lautaro/personal/ReciplasTS/frontend/src/componentes/AGTable.tsx"],"sourcesContent":["import {useState, useEffect, useMemo, useRef, useCallback} from \"react\";\n// AG-Grid\nimport {AgGridReact} from \"ag-grid-react\";\nimport {ColDef, GridApi} from \"ag-grid-community\"\nimport \"ag-grid-community/styles/ag-grid.css\";\nimport \"ag-grid-community/styles/ag-theme-alpine.css\";\n\n// La idea es que tengamos una unica funcion AGTable para llamar a todas las tablas, pasandole los parametros para que sean únicas.\n// TODO: Ver como parametrizar las columnas.\n\nexport function AGTable({endpointPath}:{endpointPath: string }) {\n    const NumFilter  =  \"agNumberColumnFilter\";\n    const TextFilter =  \"agTextColumnFilter\";\n    const DateFilter =  \"agDateColumnFilter\";\n    const gridRef = useRef<AgGridReact | null>(null);\n    const [gridApi, setGridApi] = useState(null);\n    const [gridColumnApi, setGridColumnApi] = useState(null)\n    const [rowData, setRowData] = useState();\n    const [columnDefs, setColumnDefs] = useState<ColDef[]>();\n\n    const defaultColDef = useMemo( () => ({\n        sortable: true,\n        filter: true,\n        resizable: true,\n        floatingFilter: true,\n    }), []);\n\n    // const [columnDefs, setColumnDefs] = useState<ColDef[]>([\n    //     {field: \"ID\", filter: NumFilter,},\n    //     {field: \"Producto\", filter: TextFilter},\n    //     {field: \"Cantidad\", filter: NumFilter},\n    //     {field: \"Precio\", filter: NumFilter},\n    //     {field: \"Descripción\", filter: TextFilter},\n    //     {field: \"UltimoCambio\", filter: DateFilter},\n    //     {field: \"Apellido\", filter: TextFilter}\n    // ]);\n\n    \n    useEffect(() => {\n      // fetch(\"127.0.0.1:8000/api/clientes/\")\n      fetch('https://www.ag-grid.com/example-assets/row-data.json')\n      .then(result => result.json())\n      .then(rowData => setRowData(rowData))\n      }, []);\n\n    useEffect(() => {\n      // fetch(\"127.0.0.1:8000/api/clientes/\")\n      fetch('https://www.ag-grid.com/example-assets/row-data.json')\n      .then(result => result.json())\n      .then(data => {\n        const colDefs = gridOptions.api.getColumnDefs();\n        colDefs.lenght=0;\n        const keys = Object.keys(data[0])\n        keys.forEach(key => colDefs.push({field : key}));\n        setColumnDefs(colDefs);\n        setRowData(data);\n        \n        })\n      }, []);\n    // [\n    //     {ID: 1, Producto:\"Paraguas\", Cantidad:\"20\", Precio:\"$1000\", Descripción:\"Morbi ut odio.\", UltimoCambio: \"06/23/2023\"},\n    //     {ID: 2, Producto:\"Mesa\", Cantidad:\"24\", Precio:\"$10000\", Descripción:\"In eleifend quam a odio.\", UltimoCambio: \"04/21/2023\"},\n    //     {ID: 3, Producto:\"Mesa\", Cantidad:\"48\", Precio:\"$2000\", Descripción:\" Cum sociis natoque mus.\", UltimoCambio: \"03/01/2023\"},\n    //     {ID: 4, Producto:\"Zapatillas\", Cantidad:\"59\", Precio:\"$1500\", Descripción:\"Sed vel enim sit.\", UltimoCambio: \"02/25/2023\"},\n    //     {ID: 5, Producto:\"Lampara\", Cantidad:\"17\", Precio:\"$7000\", Descripción:\"Vivamos in felis.\", UltimoCambio: \"02/11/2023\"},\n    //     {ID: 6, Producto:\"Mesa\", Cantidad:\"27\", Precio:\"$500\", Descripción:\"Integer non velit.\", UltimoCambio: \"07/01/2023\"},\n    //     {ID: 7, Producto:\"Lampara\", Cantidad:\"51\", Precio:\"$4000\", Descripción:\"Morbi venstibulum.\", UltimoCambio: \"03/13/2023\"},\n    //     {ID: 8, Producto:\"Mesa\", Cantidad:\"42\", Precio:\"$9000\", Descripción:\"Impsum primis.\", UltimoCambio: \"03/06/2023\"},\n    //     {ID: 9, Producto:\"Anteojos\", Cantidad:\"15\", Precio:\"$3500\", Descripción:\"Sed accumsan felis.\", UltimoCambio: \"08/31/2023\"},\n    //     {ID: 10, Producto:\"Silla\", Cantidad:\"44\", Precio:\"$1000\", Descripción:\"Proin eu mi.\", UltimoCambio: \"05/27/2023\"}\n    // ]\n    \n    // Esto es para que el ancho de las columnas de la tabla se actualizen para usar todo el ancho de la ventana.\n    const sizeToFit = useCallback(() => {\n        gridRef.current?.api?.sizeColumnsToFit({});\n    }, []);\n    \n    useEffect(() => {\n        window.addEventListener('resize', sizeToFit);\n        return () => {\n        window.removeEventListener('resize', sizeToFit);\n        };\n    }, []);\n\n    // TODO: HACER QUE sizeToFit se ejecute cuando se carga la ventana por primera vez.\n    // Me parece que esto no funciona por cómo está definido sizeToFit.\n    // useEffect(() => {\n    //     console.log(\"ACA DEBERIA FUNCIONAR!\")\n    //     sizeToFit\n    // }, []);\n    \n    return (\n    <div>\n        <div className ='ag-theme-alpine' style={{height: 650}}>\n            <AgGridReact \n                ref = {gridRef}\n                rowData={rowData}\n                columnDefs={columnDefs}\n                defaultColDef ={defaultColDef}\n                rowSelection='multiple'\n                animateRows = {true}\n                pagination = {true}\n            />\n        </div>\n    </div>\n    )\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}